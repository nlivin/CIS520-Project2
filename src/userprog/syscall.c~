#include "userprog/syscall.h"
#include <stdio.h>
#include <syscall-nr.h>
#include "threads/interrupt.h"
#include "threads/thread.h"
#include "threads/init.h"

static void syscall_handler (struct intr_frame *)
{
  typedef int syscall_function (int, int, int);
  /* A system call. */
  struct syscall
  {
    size_t arg_cnt; /* Number of arguments. */
    syscall_function *func; /* Implementation. */
  };
  /* Table of system calls. */
  static const struct syscall syscall_table[] =
  {
    {0, (syscall_function *) sys_halt},
    {1, (syscall_function *) sys_exit},
    {1, (syscall_function *) sys_exec},
    {1, (syscall_function *) sys_wait},
    {2, (syscall_function *) sys_create},
    {1, (syscall_function *) sys_remove},
    {1, (syscall_function *) sys_open},
    {1, (syscall_function *) sys_filesize},
    {3, (syscall_function *) sys_read},
    {3, (syscall_function *) sys_write},
    {2, (syscall_function *) sys_seek},
    {1, (syscall_function *) sys_tell},
    {1, (syscall_function *) sys_close}
  }

}

void
syscall_init (void) 
{
  intr_register_int (0x30, 3, INTR_ON, syscall_handler, "syscall");
  lock_init(&fs_lock);
}

static void
syscall_handler (struct intr_frame *f UNUSED) 
{
  printf ("system call!\n");
  thread_exit ();
}

void 
halt (void)
{

}

void 
exit(int status)
{

}

pid_t 
exec(const char *cmd_line)
{

}

int 
wait(pid_t pid)
{

}

bool 
create(const char *file, unsigned initial_size)
{

}

bool 
remove(const char *file)
{

}

int 
open(const char *file)
{

}

int 
filesize(int fd)
{

}

int 
read(int fd, void *buffer, unsigned size)
{

}

int 
write (int fd, const void *buffer, unsigned size)
{

}

void 
seek(int fd, unsigned position)
{

}

unsigned 
tell(int fd)
{

}

void close(int fd)
{

}
